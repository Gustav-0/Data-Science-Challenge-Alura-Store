Data Science: Challenge Alura Store
# Importando base de dados das 4 lojas
import pandas as pd

url = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_1.csv"
url2 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_2.csv"
url3 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_3.csv"
url4 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_4.csv"

loja = pd.read_csv(url)
loja2 = pd.read_csv(url2)
loja3 = pd.read_csv(url3)
loja4 = pd.read_csv(url4)

loja.head()

# 1. An√°lise do faturamento

import pandas as pd
import matplotlib.pyplot as plt

# C√°lculo do faturamento total por loja
faturamento_por_loja = loja.groupby("Local da compra")["Pre√ßo"].sum().reset_index()

# Ordenar para visualiza√ß√£o mais clara
faturamento_por_loja = faturamento_por_loja.sort_values(by="Pre√ßo", ascending=False)

# Exibir a tabela no console
print(faturamento_por_loja)

# Criar os 3 gr√°ficos
plt.figure(figsize=(14, 8))

# 1Ô∏è‚É£ Gr√°fico de Barras
plt.subplot(1, 3, 1)
plt.bar(faturamento_por_loja["Local da compra"], faturamento_por_loja["Pre√ßo"], color="skyblue")
plt.title("Faturamento por Local da Compra (Barras)")
plt.ylabel("Faturamento (R$)")
plt.xticks(rotation=45)

# 2Ô∏è‚É£ Gr√°fico de Pizza
plt.subplot(1, 3, 2)
plt.pie(faturamento_por_loja["Pre√ßo"], labels=faturamento_por_loja["Local da compra"], autopct="%1.1f%%", startangle=90)
plt.title("Participa√ß√£o no Faturamento (%)")

# 3Ô∏è‚É£ Gr√°fico de Linha
plt.subplot(1, 3, 3)
plt.plot(faturamento_por_loja["Local da compra"], faturamento_por_loja["Pre√ßo"], marker="o", color="green")
plt.title("Faturamento por Local da Compra (Linha)")
plt.ylabel("Faturamento (R$)")
plt.xticks(rotation=45)

# Ajustar layout
plt.tight_layout()
plt.show()

#2. Vendas por Categoria

import pandas as pd
import matplotlib.pyplot as plt

for var in [loja, loja2, loja3, loja4]:
    if not isinstance(var, pd.DataFrame):
        raise TypeError(f"Expected a pandas DataFrame, but found type: {type(var)}")

# Concatenate all dataframes into a single dataframe
all_lojas_df = pd.concat([loja, loja2, loja3, loja4], ignore_index=True)


# Calcular quantidade de produtos vendidos por Loja e Categoria
vendas_por_categoria_loja = (
    all_lojas_df.groupby(["Local da compra", "Categoria do Produto"])["Produto"]
    .count()
    .reset_index(name="Quantidade Vendida")
)

# Encontrar a categoria mais popular em cada loja
categorias_populares = vendas_por_categoria_loja.sort_values(
    by=["Local da compra", "Quantidade Vendida"], ascending=[True, False]
).groupby("Local da compra").head(1)

print("Categorias mais populares por loja:")
print(categorias_populares)

# ----- Visualiza√ß√£o -----
lojas_unicas = vendas_por_categoria_loja["Local da compra"].unique()
fig, axes = plt.subplots(len(lojas_unicas), 1, figsize=(10, 5 * len(lojas_unicas)))

if len(lojas_unicas) == 1:
    axes = [axes]  # garante que seja iter√°vel mesmo com 1 loja

for ax, loja_nome in zip(axes, lojas_unicas):
    dados_loja = vendas_por_categoria_loja[vendas_por_categoria_loja["Local da compra"] == loja_nome]
    dados_loja = dados_loja.sort_values(by="Quantidade Vendida", ascending=False)

    ax.bar(dados_loja["Categoria do Produto"], dados_loja["Quantidade Vendida"], color="orange")
    ax.set_title(f"Quantidade de Produtos Vendidos por Categoria - {loja_nome}")
    ax.set_ylabel("Quantidade Vendida")
    ax.set_xticks(range(len(dados_loja["Categoria do Produto"]))) # Set explicit ticks
    ax.set_xticklabels(dados_loja["Categoria do Produto"], rotation=45, ha="right")


plt.tight_layout()
plt.show()


# 3. M√©dia de Avalia√ß√£o das Lojas

import pandas as pd
import matplotlib.pyplot as plt

# Calcular m√©dia das avalia√ß√µes por loja
media_avaliacao = (
    all_lojas_df.groupby("Local da compra")["Avalia√ß√£o da compra"]
      .mean()
      .reset_index(name="M√©dia de Avalia√ß√£o")
)

# Ordenar da maior para a menor m√©dia
media_avaliacao = media_avaliacao.sort_values(by="M√©dia de Avalia√ß√£o", ascending=False)

# Exibir no console
print(media_avaliacao)

# Criar os gr√°ficos
plt.figure(figsize=(14, 8))

# 1Ô∏è‚É£ Gr√°fico de Barras
plt.subplot(1, 3, 1)
plt.bar(media_avaliacao["Local da compra"], media_avaliacao["M√©dia de Avalia√ß√£o"], color="skyblue")
plt.title("M√©dia de Avalia√ß√µes por Loja (Barras)")
plt.ylabel("M√©dia de Avalia√ß√£o")
plt.ylim(0, 5)  # Avalia√ß√£o da compra vai de 1 a 5
plt.xticks(rotation=45)

# 2Ô∏è‚É£ Gr√°fico de Pizza
plt.subplot(1, 3, 2)
plt.pie(
    media_avaliacao["M√©dia de Avalia√ß√£o"],
    labels=media_avaliacao["Local da compra"],
    autopct="%1.1f%%",
    startangle=90
)
plt.title("Propor√ß√£o da M√©dia de Avalia√ß√£o")

# 3Ô∏è‚É£ Gr√°fico de Linha
plt.subplot(1, 3, 3)
plt.plot(
    media_avaliacao["Local da compra"],
    media_avaliacao["M√©dia de Avalia√ß√£o"],
    marker="o",
    color="green"
)
plt.title("M√©dia de Avalia√ß√£o por Loja (Linha)")
plt.ylabel("M√©dia de Avalia√ß√£o")
plt.ylim(0, 5) # Avalia√ß√£o da compra vai de 1 a 5
plt.xticks(rotation=45)

# Ajustar layout
plt.tight_layout()
plt.show()

# 4. Produtos Mais e Menos Vendidos

import pandas as pd
import matplotlib.pyplot as plt

# Contagem de vendas por produto e loja
vendas_produto = (
    all_lojas_df.groupby(["Loja", "Produto"])["Produto"]
      .count()
      .reset_index(name="Quantidade Vendida")
)

# Ordenar por loja e quantidade
vendas_produto = vendas_produto.sort_values(
    by=["Loja", "Quantidade Vendida"], ascending=[True, False]
)

# Identificar mais vendidos e menos vendidos por loja
mais_vendidos = vendas_produto.groupby("Loja").head(1).reset_index(drop=True)
menos_vendidos = vendas_produto.groupby("Loja").tail(1).reset_index(drop=True)

print("üìà Produtos mais vendidos por loja:")
print(mais_vendidos)
print("\nüìâ Produtos menos vendidos por loja:")
print(menos_vendidos)

# Unir mais e menos vendidos para visualiza√ß√£o
destaques = pd.concat([mais_vendidos, menos_vendidos])
destaques["Tipo"] = ["Mais Vendido"] * len(mais_vendidos) + ["Menos Vendido"] * len(menos_vendidos)

# Criar os gr√°ficos
plt.figure(figsize=(15, 8))

# 1Ô∏è‚É£ Gr√°fico de Barras (Compara√ß√£o mais x menos vendido)
plt.subplot(1, 3, 1)
cores = ["green" if t == "Mais Vendido" else "red" for t in destaques["Tipo"]]
plt.bar(destaques["Produto"], destaques["Quantidade Vendida"], color=cores)
plt.title("Mais e Menos Vendidos por Loja (Barras)")
plt.ylabel("Quantidade Vendida")
plt.xticks(rotation=45)

# 2Ô∏è‚É£ Gr√°fico de Pizza (por loja, mais vendido)
plt.subplot(1, 3, 2)
plt.pie(
    mais_vendidos["Quantidade Vendida"],
    labels=mais_vendidos["Produto"],
    autopct="%1.1f%%",
    startangle=90
)
plt.title("Participa√ß√£o dos Mais Vendidos (por loja)")

# 3Ô∏è‚É£ Gr√°fico de Linha (Todos os destaques)
plt.subplot(1, 3, 3)
for loja in destaques["Loja"].unique():
    dados_loja = destaques[destaques["Loja"] == loja]
    plt.plot(dados_loja["Produto"], dados_loja["Quantidade Vendida"], marker="o", label=loja)
plt.title("Compara√ß√£o dos Destaques por Loja (Linha)")
plt.ylabel("Quantidade Vendida")
plt.xticks(rotation=45)
plt.legend()

plt.tight_layout()
plt.show()

# 5. Frete M√©dio por Loja

import pandas as pd
import matplotlib.pyplot as plt

# Calcular custo m√©dio de frete por loja
media_frete = (
    all_lojas_df.groupby("Local da compra")["Frete"]
      .mean()
      .reset_index(name="Custo M√©dio de Frete")
)

# Ordenar do maior para o menor
media_frete = media_frete.sort_values(by="Custo M√©dio de Frete", ascending=False)

# Mostrar no console formatado em R$
media_frete["Custo M√©dio de Frete"] = media_frete["Custo M√©dio de Frete"].round(2)
print(media_frete)

# Criar gr√°ficos
plt.figure(figsize=(14, 8))

# 1Ô∏è‚É£ Gr√°fico de Barras com valores
plt.subplot(1, 3, 1)
plt.bar(media_frete["Local da compra"], media_frete["Custo M√©dio de Frete"], color="steelblue")
for i, v in enumerate(media_frete["Custo M√©dio de Frete"]):
    plt.text(i, v + 0.02, f"R$ {v:,.2f}", ha='center', fontsize=9)
plt.title("Custo M√©dio de Frete por Loja (Barras)")
plt.ylabel("R$ (m√©dia)")
plt.xticks(rotation=45)

# 2Ô∏è‚É£ Gr√°fico de Pizza
plt.subplot(1, 3, 2)
plt.pie(
    media_frete["Custo M√©dio de Frete"],
    labels=media_frete["Local da compra"],
    autopct=lambda p: f"{p:.1f}%\nR$ {(p/100)*media_frete['Custo M√©dio de Frete'].sum():,.2f}",
    startangle=90
)
plt.title("Propor√ß√£o do Custo M√©dio de Frete")

# 3Ô∏è‚É£ Gr√°fico de Linha com valores
plt.subplot(1, 3, 3)
plt.plot(
    media_frete["Local da compra"],
    media_frete["Custo M√©dio de Frete"],
    marker="o",
    color="green"
)
for i, v in enumerate(media_frete["Custo M√©dio de Frete"]):
    plt.text(i, v + 0.02, f"R$ {v:,.2f}", ha='center', fontsize=9)
plt.title("Custo M√©dio de Frete por Loja (Linha)")
plt.ylabel("R$ (m√©dia)")
plt.xticks(rotation=45)

# Ajustar layout
plt.tight_layout()
plt.show()

# Relat√≥rio

Entendendo o faturamento das lojas as que est√£o no Sudeste faturam mais pois √© onde est√° a base clientes da franquia, o custo m√©dio de frete para regi√µes Norte √© extremamente caro
especialmente em RR e a s avali√ß√£oes dos produtos e n√£o est√° boa, logo concluo que a loja que deve ser vendida √© a que mais atente da regi√£o norte nordeste. 
